//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Spatial;
using Elements.Validators;
using Elements.Serialization.JSON;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements
{
#pragma warning disable // Disable all warnings

    /// <summary>An alternate representation of an object.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(Elements.Serialization.JSON.JsonInheritanceConverter), "discriminator")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Symbol
    {
        [Newtonsoft.Json.JsonConstructor]
        public Symbol(GeometryReference @geometry, SymbolCameraPosition @cameraPosition)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Symbol>();
            if (validator != null)
            {
                validator.PreConstruct(new object[] { @geometry, @cameraPosition });
            }

            this.Geometry = @geometry;
            this.CameraPosition = @cameraPosition;

            if (validator != null)
            {
                validator.PostConstruct(this);
            }
        }

        [Newtonsoft.Json.JsonProperty("Geometry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometryReference Geometry { get; set; }

        /// <summary>A named camera position for this representation, indicating the direction from which the camera is looking (a top view looks from top down, a north view looks from north to south.)</summary>
        [Newtonsoft.Json.JsonProperty("CameraPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SymbolCameraPosition CameraPosition { get; set; }


    }
}